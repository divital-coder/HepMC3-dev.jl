// this file was auto-generated by wrapit v1.4.0
#include "jlcxx/jlcxx.hpp"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

#include "jlHepMC3.h"

#include <regex>

#include "dbg_msg.h"
#include "Wrapper.h"

class JlHepMC3_FourVector;
class JlHepMC3_Attribute;
class JlHepMC3_GenRunInfo;
class JlHepMC3_GenEvent;
class JlHepMC3_IntAttribute;
class JlHepMC3_LongAttribute;
class JlHepMC3_DoubleAttribute;
class JlHepMC3_FloatAttribute;
class JlHepMC3_StringAttribute;
class JlHepMC3_CharAttribute;
class JlHepMC3_LongLongAttribute;
class JlHepMC3_UIntAttribute;
class JlHepMC3_ULongAttribute;
class JlHepMC3_ULongLongAttribute;
class JlHepMC3_BoolAttribute;
class JlHepMC3_VectorCharAttribute;
class JlHepMC3_VectorFloatAttribute;
class JlHepMC3_VectorLongLongAttribute;
class JlHepMC3_VectorUIntAttribute;
class JlHepMC3_VectorULongAttribute;
class JlHepMC3_VectorULongLongAttribute;
class JlHepMC3_VectorIntAttribute;
class JlHepMC3_VectorLongIntAttribute;
class JlHepMC3_VectorDoubleAttribute;
class JlHepMC3_VectorStringAttribute;
class JlHepMC3_GenHeavyIon;
class JlHepMC3_GenPdfInfo;
class JlHepMC3_GenCrossSection;
class JlHepMC3_GenVertex;
class JlHepMC3_GenVertexData;
class JlHepMC3_GenParticleData;
class JlHepMC3_GenParticle;
class JlGlobal;

std::shared_ptr<Wrapper> newJlHepMC3_FourVector(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_Attribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_GenRunInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_GenEvent(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_IntAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_LongAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_DoubleAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_FloatAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_StringAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_CharAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_LongLongAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_UIntAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_ULongAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_ULongLongAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_BoolAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_VectorCharAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_VectorFloatAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_VectorLongLongAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_VectorUIntAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_VectorULongAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_VectorULongLongAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_VectorIntAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_VectorLongIntAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_VectorDoubleAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_VectorStringAttribute(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_GenHeavyIon(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_GenPdfInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_GenCrossSection(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_GenVertex(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_GenVertexData(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_GenParticleData(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlHepMC3_GenParticle(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlGlobal(jlcxx::Module&);
//method from libcxxwrap returning its version
extern "C" JLCXX_API const char* cxxwrap_version_string();

//Check the code is compiled with a compatible version of libcxxwrap:
static_assert(1000*1000*JLCXX_VERSION_MAJOR  + 1000 * JLCXX_VERSION_MINOR + JLCXX_VERSION_PATCH >= 12000
  && 1000 * 1000 * JLCXX_VERSION_MAJOR  + 1000 * JLCXX_VERSION_MINOR + JLCXX_VERSION_PATCH < 14000,
  "The code was generated with WrapIt! for "
  "a different CxxWrap version (controlled with the cxxwrap_version parameter).");

//Check the version of loaded libcxxwrap library:
void throw_if_version_incompatibility(){
  std::string version_str = cxxwrap_version_string();
  static std::regex r("([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})");
  std::smatch matches;
  if(!std::regex_match(version_str, matches, r)){
    std::cerr << "Warning: Failed to check libcxxwrap version.";
  } else{    long version_int =   1000*1000*strtol(matches[1].str().c_str(), 0, 10)
                       +      1000*strtol(matches[2].str().c_str(), 0, 10)
                       +           strtol(matches[3].str().c_str(), 0, 10);
    if(version_int < 12000 || version_int >= 14000){
      throw std::runtime_error(std::string("Found libcxxwrap_jll version ")
       + version_str + ", while module HepMC3 requires a version in "
      "[0.12.0, 0.14.0)."
      " Note: if the module was installed with the package manager, the Project.toml file "
      "of the package is probably missing a compat specification that would have prevented "
      "the inconsistency.");
    }
  }
}


JLCXX_MODULE define_julia_module(jlcxx::Module& jlModule){
  
throw_if_version_incompatibility();

  std::vector<std::shared_ptr<Wrapper>> wrappers = {
    std::shared_ptr<Wrapper>(newJlHepMC3_FourVector(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_Attribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_GenRunInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_GenEvent(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_IntAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_LongAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_DoubleAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_FloatAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_StringAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_CharAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_LongLongAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_UIntAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_ULongAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_ULongLongAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_BoolAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_VectorCharAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_VectorFloatAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_VectorLongLongAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_VectorUIntAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_VectorULongAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_VectorULongLongAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_VectorIntAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_VectorLongIntAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_VectorDoubleAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_VectorStringAttribute(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_GenHeavyIon(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_GenPdfInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_GenCrossSection(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_GenVertex(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_GenVertexData(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_GenParticleData(jlModule)),
    std::shared_ptr<Wrapper>(newJlHepMC3_GenParticle(jlModule)),
    std::shared_ptr<Wrapper>(newJlGlobal(jlModule))
  };

  DEBUG_MSG("Adding wrapper for enum HepMC3::Units::MomentumUnit (" __HERE__ ")");
  // defined in /Users/apple/.julia/artifacts/e594d2eb58d058362f1ddc846f42621345899c63/include/HepMC3/Units.h:29:10
  jlModule.add_bits<HepMC3::Units::MomentumUnit>("HepMC3!Units!MomentumUnit", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("HepMC3!Units!MEV", HepMC3::Units::MEV);
  jlModule.set_const("HepMC3!Units!GEV", HepMC3::Units::GEV);

  DEBUG_MSG("Adding wrapper for enum HepMC3::Units::LengthUnit (" __HERE__ ")");
  // defined in /Users/apple/.julia/artifacts/e594d2eb58d058362f1ddc846f42621345899c63/include/HepMC3/Units.h:32:10
  jlModule.add_bits<HepMC3::Units::LengthUnit>("HepMC3!Units!LengthUnit", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("HepMC3!Units!MM", HepMC3::Units::MM);
  jlModule.set_const("HepMC3!Units!CM", HepMC3::Units::CM);
  for(const auto& w: wrappers) w->add_methods();

}
