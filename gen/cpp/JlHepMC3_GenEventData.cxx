// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlHepMC3.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<HepMC3::GenEventData> : std::false_type { };
  template<> struct DefaultConstructible<HepMC3::GenEventData> : std::false_type { };
}

// Class generating the wrapper for type HepMC3::GenEventData
// signature to use in the veto file: HepMC3::GenEventData
struct JlHepMC3_GenEventData: public Wrapper {

  JlHepMC3_GenEventData(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type HepMC3::GenEventData (" __HERE__ ")");
    // defined in /home/hurtbadly/.julia/artifacts/7594d64d7c28f9689b484bf4d09af6dbb8b5123c/include/HepMC3/Data/GenEventData.h:26:8
    jlcxx::TypeWrapper<HepMC3::GenEventData>  t = jlModule.add_type<HepMC3::GenEventData>("HepMC3!GenEventData");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<HepMC3::GenEventData>>(new jlcxx::TypeWrapper<HepMC3::GenEventData>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<HepMC3::GenEventData>> type_;
};
std::shared_ptr<Wrapper> newJlHepMC3_GenEventData(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlHepMC3_GenEventData(module));
}
